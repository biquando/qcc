#pragma once

#include <string>
#include <unordered_map>
#include <vector>

enum class BuiltinType {
    Void,
    Int,
    Char,
};

enum class BuiltinOperator {
    Plus, Minus, Star, Fslash,
    Eq, Ne,
    Lt, Gt, Le, Ge,
    Not,
    BitNot, BitAnd, BitOr, BitXor
};

enum class LiteralType {
    Int,
    Char,
};
static BuiltinType toBuiltinType(LiteralType literalType) {
    #define _CONVERT(T) case LiteralType::T: return BuiltinType::T
    switch (literalType) {
        _CONVERT(Int);
        _CONVERT(Char);
    }
    #undef _CONVERT
}

static const std::string BUILTIN_PRINTI = R"(
; Generated by clang with -O0
; char out[64];
; char *printi(long n) {
;     int i;
;     unsigned char isNeg = n < 0;
;     if (isNeg) {
;         n *= -1;
;     }
;     out[63] = 0;
;     out[62] = '\n';
;     for (i = 61; i >= 0; i--) {
;         out[i] = n % 10 + '0';
;         n /= 10;
;         if (n == 0) {
;             break;
;         }
;     }
;     if (isNeg) {
;         i--;
;         out[i] = '-';
;     }
;     return out + i;
;     // Added some assembly code to call the write syscall instead
; }
        .p2align 2
_printi:                                ; @printi
        .cfi_startproc
; %bb.0:
        sub sp, sp, #32
        .cfi_def_cfa_offset 32
        adrp x8, printi_buf@GOTPAGE
        ldr x8, [x8, printi_buf@GOTPAGEOFF]
        str x8, [sp, #8]                    ; 8-byte Folded Spill
        str x0, [sp, #24]
        ldr x8, [sp, #24]
        subs x8, x8, #0
        cset w8, lt
        and w8, w8, #0x1
        strb w8, [sp, #19]
        ldrb w8, [sp, #19]
        subs w8, w8, #0
        cset w8, eq
        tbnz w8, #0, printi_LBB0_2
        b printi_LBB0_1
printi_LBB0_1:
        ldr x9, [sp, #24]
        mov x8, #0
        subs x8, x8, x9
        str x8, [sp, #24]
        b printi_LBB0_2
printi_LBB0_2:
        ldr x9, [sp, #8]                    ; 8-byte Folded Reload
        strb wzr, [x9, #63]
        mov w8, #10
        strb w8, [x9, #62]
        mov w8, #61
        str w8, [sp, #20]
        b printi_LBB0_3
printi_LBB0_3:                                 ; =>This Inner Loop Header: Depth=1
        ldr w8, [sp, #20]
        subs w8, w8, #0
        cset w8, lt
        tbnz w8, #0, printi_LBB0_8
        b printi_LBB0_4
printi_LBB0_4:                                 ;   in Loop: Header=BB0_3 Depth=1
        ldr x10, [sp, #8]                   ; 8-byte Folded Reload
        ldr x8, [sp, #24]
        mov x9, #10
        sdiv x11, x8, x9
        mul x11, x11, x9
        subs x8, x8, x11
        add x8, x8, #48
        ldrsw x11, [sp, #20]
                                        ; kill: def $w8 killed $w8 killed $x8
        strb w8, [x10, x11]
        ldr x8, [sp, #24]
        sdiv x8, x8, x9
        str x8, [sp, #24]
        ldr x8, [sp, #24]
        subs x8, x8, #0
        cset w8, ne
        tbnz w8, #0, printi_LBB0_6
        b printi_LBB0_5
printi_LBB0_5:
        b printi_LBB0_8
printi_LBB0_6:                                 ;   in Loop: Header=BB0_3 Depth=1
        b printi_LBB0_7
printi_LBB0_7:                                 ;   in Loop: Header=BB0_3 Depth=1
        ldr w8, [sp, #20]
        subs w8, w8, #1
        str w8, [sp, #20]
        b printi_LBB0_3
printi_LBB0_8:
        ldrb w8, [sp, #19]
        subs w8, w8, #0
        cset w8, eq
        tbnz w8, #0, printi_LBB0_10
        b printi_LBB0_9
printi_LBB0_9:
        ldr x8, [sp, #8]                    ; 8-byte Folded Reload
        ldr w9, [sp, #20]
        subs w9, w9, #1
        str w9, [sp, #20]
        ldrsw x9, [sp, #20]
        add x9, x8, x9
        mov w8, #45
        strb w8, [x9]
        b printi_LBB0_10
printi_LBB0_10:
        ldr x8, [sp, #8]                    ; 8-byte Folded Reload
        ldrsw x9, [sp, #20]
        add x0, x8, x9

        ; Added code
        mov x1, x0
        mov x0, #1
        mov x2, #63
        sub x2, x2, x9
        mov x16, #4
        svc #0

        add sp, sp, #32
        ret
        .cfi_endproc
                                        ; -- End function
        .comm printi_buf,64,0                       ; @printi_buf
)";

enum class BuiltinFn {
    Printi,
};

const std::unordered_map<BuiltinFn, std::string> BUILTIN_FNS{
    { BuiltinFn::Printi, "printi" },
};

const std::unordered_map<BuiltinFn, std::string> BUILTIN_FN_DEFS{
    { BuiltinFn::Printi, BUILTIN_PRINTI },
};
