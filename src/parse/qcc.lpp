%{
#include <cstdio>
#include <cstdlib>
#include <string>
#include "ast/ast.hpp"
#include "qcc.y.hpp"
#include "parse/driver.hpp"

static char _escape(char c);
%}

%option noyywrap

IDENTIFIER [a-zA-Z_][a-zA-Z_0-9]*
INT (([0-9]+)|(0x[0-9a-f]+))
CHAR '[^\\]'
ESCAPED_CHAR '\\.'

%%

 /* Built-in types */
void  { return yy::parser::make_BUILTIN_TYPE(BuiltinType::Void);  }
int   { return yy::parser::make_BUILTIN_TYPE(BuiltinType::Int);  }
char  { return yy::parser::make_BUILTIN_TYPE(BuiltinType::Char); }

 /* Identifiers */
{IDENTIFIER} { return yy::parser::make_IDENTIFIER(yytext); }

 /* Literals */
{INT} { return yy::parser::make_INT_LITERAL(strtol(yytext, NULL, 0)); }
{CHAR} { return yy::parser::make_CHAR_LITERAL(yytext[1]); }
{ESCAPED_CHAR} { return yy::parser::make_CHAR_LITERAL(_escape(yytext[2])); }

 /* Operators */
"+"  { return yy::parser::make_OP_PLUS  (BuiltinOperator::Plus  ); }
"-"  { return yy::parser::make_OP_MINUS (BuiltinOperator::Minus ); }
"*"  { return yy::parser::make_OP_STAR  (BuiltinOperator::Star  ); }
"/"  { return yy::parser::make_OP_FSLASH(BuiltinOperator::Fslash); }
"==" { return yy::parser::make_OP_EQ    (BuiltinOperator::Eq    ); }
"!=" { return yy::parser::make_OP_NE    (BuiltinOperator::Ne    ); }
"<"  { return yy::parser::make_OP_LT    (BuiltinOperator::Lt    ); }
">"  { return yy::parser::make_OP_GT    (BuiltinOperator::Gt    ); }
"<=" { return yy::parser::make_OP_LE    (BuiltinOperator::Le    ); }
">=" { return yy::parser::make_OP_GE    (BuiltinOperator::Ge    ); }
"!"  { return yy::parser::make_OP_NOT   (BuiltinOperator::Not   ); }

 /* Other characters */
[ \t\r\n]+ {}
. { return yytext[0]; }

%%

void Driver::scan_begin() {
    yyin = stdin;
}

void Driver::scan_end() {
    fclose(yyin);
}

static char _escape(char c) {
    switch(c) {
        case '\\':
            return '\\';
        case 'n':
            return '\n';
        case 't':
            return '\t';
        case 'r':
            return '\r';
        case '\'':
            return '\'';
        case '\"':
            return '\"';
        case 'b':
            return '\b';
        case 'f':
            return '\f';
        case 'v':
            return '\v';
        case 'a':
            return '\a';
        case '0':
            return '\0';
        default:
            return c;
    }
}
